// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserType {
  ADMIN
  ORGANIZATION
  USER
}

enum AnnouncementType {
  INFO
  WARNING
  CANCELLED
}

model OrganizationParent {
  id                   String              @id @default(cuid())
  name                 String
  description          String
  organizationChildren OrganizationGroup[]
}

model OrganizationGroup {
  organizationParentId String
  organizationParent   OrganizationParent @relation(fields: [organizationParentId], references: [id])
  organizationChildId  String
  organizationChild    OrganizationChild  @relation(fields: [organizationChildId], references: [id])

  @@id([organizationParentId, organizationChildId])
}

model OrganizationChild {
  id                  String              @id @default(cuid())
  name                String
  acronym             String?
  icon                String?
  description         String?
  facebook            String?
  instagram           String?
  twitter             String?
  linkedin            String?
  isAdmin             Boolean             @default(false)
  isArchived          Boolean             @default(false)
  userId              String?             @unique
  user                User?               @relation(fields: [userId], references: [id])
  events              Event[]
  organizationParents OrganizationGroup[]
}

model Course {
  id     String   @id @default(cuid())
  name   String
  booker Booker[]
}

model User {
  id             String             @id @default(cuid())
  email          String             @unique
  password       String
  booker         Booker?
  bookerId       String?
  organization   OrganizationChild?
  organizationId String?
  userType       UserType
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Booker {
  id            String         @id @default(uuid())
  contactNumber String
  validId       String?
  courseId      String
  course        Course         @relation(fields: [courseId], references: [id])
  isAlumni      Boolean // If Alumni => render Batch Field else render YTG field (save in batch field)
  batch         Int? // create util func for current students ((YTG) => YTG - CurrentDate())
  userId        String?        @unique
  user          User?          @relation(fields: [userId], references: [id])
  registrations Registration[]
}

model Payment {
  id             String       @id @default(cuid())
  amount         Float
  currency       String
  paymentDate    DateTime     @default(now())
  registrationId String       @unique
  registration   Registration @relation(fields: [registrationId], references: [id])
}

model Registration {
  id               String         @id @default(cuid())
  bookerId         String
  eventId          String
  confirmedAt      DateTime?
  isAttended       Boolean        @default(false)
  ticketCategoryId String
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  booker           Booker         @relation(fields: [bookerId], references: [id])
  event            Event          @relation(fields: [eventId], references: [id])
  payment          Payment?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model TicketCategory {
  id                   String         @id @default(cuid())
  name                 String
  description          String
  price                Float
  capacity             Int
  registrationDeadline DateTime
  eventId              String
  event                Event          @relation(fields: [eventId], references: [id])
  registrations        Registration[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Event {
  id                     String               @id @default(cuid())
  name                   String
  description            String
  dateStart              DateTime
  dateEnd                DateTime
  isRegistrationOpen     Boolean              @default(false) // Registration can be published but not open
  isRegistrationRequired Boolean              @default(true) // Some registrations are open to public without registration
  isOpenToOutsiders      Boolean              @default(false) // Event is open to outsiders
  isPublished            Boolean              @default(false) // Event can be created but not published
  isArchived             Boolean              @default(false) // Event is archived
  orgId                  String
  org                    OrganizationChild    @relation(fields: [orgId], references: [id])
  registrations          Registration[]
  ticketCategories       TicketCategory[]
  eventAnnouncements     EventAnnouncements[]
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  deletedAt              DateTime?
}

model EventAnnouncements {
  id               String           @id @default(cuid())
  eventId          String
  event            Event            @relation(fields: [eventId], references: [id])
  announcementType AnnouncementType
  title            String
  content          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}
